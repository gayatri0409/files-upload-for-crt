create an print graph using adacency matrix representation
directed and unweighted graph



def addNode(v):
    global n
    if v in nodes:
        print(v,"is already existed")
    else:
        nodes.append(v)
        n=n+1 
    for x in graphs:
        x.append(0)
    temp=[]
    for i in range(n):
        temp.append(0)
    graphs.append(temp)
def show():
    for i in range(n):
        for k in range(n):
            print(graphs[i][k],end=" ")
        print()   
def addedge(node1,node2):
    if node1 not in nodes:
        print(node1,"is not available in graphs")
    elif node2 not in nodes:
        print(node2,"is not available in graph")
    else:
        i=nodes.index(node1)
        k=nodes.index(node2)
        graphs[i][k]=1
nodes=[]
graphs=[]
n=0
while True:
    print()
    print("1.Add node\n2.add edge\n3.print graph\n4.exit")
    ch=int(input("enter your choice"))
    if ch==1:
        v=input("enter node")
        addNode(v)
    elif ch==2:
        node1=input("enter node1")
        node2=input("enter node2")
        addedge(node1,node2)
    elif ch==3:
        show()
    elif ch==4:
        break
    else:
        print("invalid choice")


output

1.Add node
2.add edge
3.print graph
4.exit
enter your choice1
enter nodeA

1.Add node
2.add edge
3.print graph
4.exit
enter your choice1
enter nodeB

1.Add node
2.add edge
3.print graph
4.exit
enter your choice1
enter nodeC

1.Add node
2.add edge
3.print graph
4.exit
enter your choice1
enter nodeD

1.Add node
2.add edge
3.print graph
4.exit
enter your choice2
enter node1A
enter node2B

1.Add node
2.add edge
3.print graph
4.exit
enter your choice2
enter node1C
enter node2B

1.Add node
2.add edge
3.print graph
4.exit
enter your choice2
enter node1D
enter node2A

1.Add node
2.add edge
3.print graph
4.exit
enter your choice3
0 1 0 0 
0 0 0 0 
0 1 0 0 
1 0 0 0 

1.Add node
2.add edge
3.print graph
4.exit
enter your choice